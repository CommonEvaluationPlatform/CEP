//************************************************************************
// Copyright 2021 Massachusetts Institute of Technology
// SPDX short identifier: BSD-2-Clause
//
// File Name:      
// Program:        Common Evaluation Platform (CEP)
// Description:    
// Notes:          
//
//************************************************************************
//
// Capture SRoT to slave's TL transaction
//
`define SROT_PATH cep_tb.fpga.topDesign.topMod.srotModule
reg CaptureSROT_vector=0;
int SROT_sampleNum = 0;
int SROT_fd;
reg [31:0] srotSaveAdr = 0;
always @(posedge srot_start_capture) begin //
   `logI("Enable tl-transaction capturing of SRoT module");	    
   SROT_fd=$fopen("../../drivers/vectors/srot_playback.h","w");
   //
   // Header
   //
   $fwrite(SROT_fd,"//************************************************************************\n");
   $fwrite(SROT_fd,"// Copyright 2021 Massachusetts Institute of Technology\n");
   $fwrite(SROT_fd,"//\n");		
   $fwrite(SROT_fd,"// File Name:      srot_playback.h\n");
   $fwrite(SROT_fd,"// Program:        Common Evaluation Platform (CEP)\n");
   $fwrite(SROT_fd,"// Description:    SROT Core unit testbench stimulus\n");
   $fwrite(SROT_fd,"// Notes:\n");        
   $fwrite(SROT_fd,"//\n");
   $fwrite(SROT_fd,"//************************************************************************\n");
   $fwrite(SROT_fd,"#ifndef SROT_playback_H\n");
   $fwrite(SROT_fd,"#define SROT_playback_H\n\n");
   //
   $fwrite(SROT_fd,"#ifndef PLAYBACK_CMD_H\n");
   $fwrite(SROT_fd,"#define PLAYBACK_CMD_H\n");
   $fwrite(SROT_fd,"#define WRITE__CMD  1\n");
   $fwrite(SROT_fd,"#define RDnCMP_CMD  2\n");
   $fwrite(SROT_fd,"#define RDSPIN_CMD  3\n");
   $fwrite(SROT_fd,"#define WRITE__CMD_SIZE  3\n");
   $fwrite(SROT_fd,"#define RDnCMP_CMD_SIZE  3\n");
   $fwrite(SROT_fd,"#define RDSPIN_CMD_SIZE  5\n");
   $fwrite(SROT_fd,"#endif\n\n");
   $fwrite(SROT_fd,"uint64_t srot_playback[] = {\n");
   //
   SROT_sampleNum = 1; // start from 1
   CaptureSROT_vector=1;
end // always @ (posedge srot_capture_enable)
//
//
//
always @(posedge srot_stop_capture) begin
   if (CaptureSROT_vector) begin
      CaptureSROT_vector = 0;
      $fwrite(SROT_fd,"};\n\n");
      $fwrite(SROT_fd,"#define srot_llki_offsetBase 0x8000\n");
      $fwrite(SROT_fd,"#define srot_totalCommands %d\n",SROT_sampleNum-1);
      $fwrite(SROT_fd,"#endif\n");
      $fclose(SROT_fd);
   end
end
//
// Capture
// 
always @(negedge `SROT_PATH.clock) begin
   if (CaptureSROT_vector && `SROT_PATH.auto_master_out_a_valid) begin //
      srotSaveAdr = `SROT_PATH.auto_master_out_a_bits_address;
      
      if (`SROT_PATH.auto_master_out_a_bits_opcode == 0) begin // TL_A_PUTFULLDATA
	 $fwrite(SROT_fd,"\t%s WRITE__CMD,0x%x, 0x%x // %d\n", (SROT_sampleNum == 1) ? " " : ", ",
		 srotSaveAdr,
		 `SROT_PATH.auto_master_out_a_bits_data,
		 SROT_sampleNum++);
      end
      else if (`SROT_PATH.auto_master_out_a_bits_opcode == 4) begin // TL_A_GET
	 @(posedge (`SROT_PATH.auto_master_out_d_valid && `SROT_PATH.auto_master_out_d_ready));
	 #2;
	 $fwrite(SROT_fd,"\t%s RDSPIN_CMD,0x%x, 0x%x, 'hffffffffffffffff, 'h32 // %d\n", (SROT_sampleNum == 1) ? " " : ", ",
		 srotSaveAdr,
		 `SROT_PATH.auto_master_out_d_bits_data, // return data
		 SROT_sampleNum++);	 
      end
      else begin
	 `logE("ERROR: opcode is not supported\n",`SROT_PATH.auto_master_out_a_bits_opcode);
      end
   end
end
  
