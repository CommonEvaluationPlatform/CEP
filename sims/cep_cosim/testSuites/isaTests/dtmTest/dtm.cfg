#
# Config file for openocd to use for simulation ONLY!!!!
#
#
# remote bitbang via DPI
#
adapter driver remote_bitbang
remote_bitbang_host localhost
#
# pass in via -c "set _JTAG_SOCKET_PORT <port>" at the openocd command line
#
remote_bitbang_port $_JTAG_SOCKET_PORT
#
#
#
set _CHIPNAME riscv
jtag newtap $_CHIPNAME cpu -irlen 5 -expected-id 0x20000913
#
# 4 cores
#
set _TARGETNAME_0 $_CHIPNAME.cpu0
set _TARGETNAME_1 $_CHIPNAME.cpu1
set _TARGETNAME_2 $_CHIPNAME.cpu2
set _TARGETNAME_3 $_CHIPNAME.cpu3
#
# 4 cores
#
target create $_TARGETNAME_0 riscv -chain-position $_CHIPNAME.cpu -rtos hwthread
target create $_TARGETNAME_1 riscv -chain-position $_CHIPNAME.cpu -coreid 1
target create $_TARGETNAME_2 riscv -chain-position $_CHIPNAME.cpu -coreid 2
target create $_TARGETNAME_3 riscv -chain-position $_CHIPNAME.cpu -coreid 3
target smp $_TARGETNAME_0 $_TARGETNAME_1 $_TARGETNAME_2 $_TARGETNAME_3
#
# Some timeout
#
riscv set_reset_timeout_sec   60
riscv set_command_timeout_sec 60
riscv set_prefer_sba 1

#
# *init* will take forever to run in simulation, the goal it to verify that OpenOcd can put each of the core thru the trap and read it MISA register
# and verify its IDCODE.
# Each core expects to execute normally -> enter traps -> jump to 0x800 (openOcd tell them to do there) -> 0x848 (done with openocd) -> trap...
#
# as soon as the core's PC= 0x848 (see PassFaiul.hex) for all cores, the test will terminate which causes the socket to close 
# and *openOcd* to seg fault due to broken pipe (which is expected as of now because openocd has no feeedback to indicate socket is closed beside TDO)
#
echo "Issuing Init"
init
#
#
#
echo "End of DTM.cfg file"



