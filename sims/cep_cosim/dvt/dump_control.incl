//************************************************************************
// Copyright 2021 Massachusetts Institute of Technology
// SPDX short identifier: BSD-2-Clause
//
// File Name:      
// Program:        Common Evaluation Platform (CEP)
// Description:    
// Notes:          
//
//************************************************************************
//
// Cadence
//
`ifdef CADENCE
`define DVAR_FILE $recordfile("cep_wave")
`define DVARON    $recordon
`define DVAROFF   $recordoff
`define DVAR      $recordvars
`define DVAR_CLOSE #0
`define LEVEL0    "depth=0"
`define LEVEL1    "depth=1"
`define SEL_LEVEL (dLevel)?`LEVEL1:`LEVEL0

initial begin
  //
`ifdef NOWAVE
`else  
  `DVAR_FILE;
  `DVAR(`LEVEL0,cep_tb);
  `DVARON;	
`endif
end

`endif


//
// Modelsim ONLY
//
`ifdef MODELSIM
reg waveDumpFlag = 0; // off by default
reg dumpInProgress=0;
integer waveOnStartCycle = 0;
integer waveonCycleDump = -1;
//
always @(posedge dvtFlags[`DVTF_WAVE_START_CYCLE]) begin
   waveOnStartCycle = dvtFlags[`DVTF_PAT_HI:`DVTF_PAT_LO];
   `logI("==== waveOnStartCycle=%d",waveOnStartCycle);      
   dvtFlags[`DVTF_WAVE_START_CYCLE]=0;
end
//
always @(posedge dvtFlags[`DVTF_WAVE_CYCLE2DUMP]) begin
   waveonCycleDump = dvtFlags[`DVTF_PAT_HI:`DVTF_PAT_LO];
   `logI("==== waveonCycleDump=%d",waveonCycleDump);   
   dvtFlags[`DVTF_WAVE_CYCLE2DUMP]=0;
end

always @(posedge dvtFlags[`DVTF_WAVE_ON]) begin
   waveDumpFlag = 1;
   `logI("==== Turnning wave ON waveonCycleDump=%d waveonCycleDump=%d",waveOnStartCycle,waveonCycleDump);
   dvtFlags[`DVTF_WAVE_ON] = 0;
end

`ifdef MODELSIM
import mti_fli::*;
`endif

always @(posedge waveDumpFlag) begin
   while (1) begin
      if (waveDumpFlag && (__simTime > waveOnStartCycle)) begin
	 // Issue a $STOP to force vsim.do to ove to next step to turn on wavedump
	 `logI("==== Issuing wave_on to enable wave ON simTime=%d waveonCycleDump=%d waveonCycleDump=%d",
	       __simTime,waveOnStartCycle,waveonCycleDump);
	 //$stop;
`ifdef MODELSIM
	 mti_Command("wave_on");
`endif
`ifdef CADENCE
       `DVARON;
`endif
	 waveDumpFlag = 0;
	 dumpInProgress = 1;
      end
      else if (dumpInProgress && (waveonCycleDump != -1) && (__simTime > (waveOnStartCycle + waveonCycleDump))) begin
	 // Issue a $STOP to force vsim.do to over to next step to turn on wavedump
	 `logI("==== Issuing wave_off to disable wave ON simTime=%d waveonCycleDump=%d waveonCycleDump=%d",
	       __simTime,waveOnStartCycle,waveonCycleDump);
	 // $stop;
`ifdef MODELSIM
	 mti_Command("wave_off");	 
`endif
`ifdef CADENCE
       `DVAROFF;
`endif
	 waveDumpFlag = 0;
	 dumpInProgress = 0;
      end
      @(posedge `SHIPC_CLK );
   end
end

`endif
