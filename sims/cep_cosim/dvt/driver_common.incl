//--------------------------------------------------------------------------------------
// Copyright 2021 Massachusetts Institute of Technology
// SPDX short identifier: BSD-2-Clause
//
// File Name:      driver_common.incl
// Program:        Common Evaluation Platform (CEP)
// Description:    Defines items associated with the Core Driver Mailboxes
//                 Each core instance has it's own mailbox
// Notes:          To be included within the cpu_driver.sv module after supported
//                 tasks have been defined.
//
//--------------------------------------------------------------------------------------
`include "dpi_common.incl"

reg [3:0]   __mSlotId;
reg [3:0]   __mCpuId;
reg [31:0]  __shIpc_cmd;
reg [63:0]  __shIpc_address;
reg [31:0]  __shIpc_p0;
reg [31:0]  __shIpc_p1;
reg [31:0]  __shIpc_p2;
reg [31:0]  __shIpc_p3;
reg [31:0]  __shIpc_p4;
reg [31:0]  __shIpc_p5;
reg [31:0]  __shIpc_p6;
reg [31:0]  __shIpc_p7;
reg         __shIpc_cmdValid;
reg         __shIpc_remoteReq;
reg         __shIpc_EnableMode;
reg         __shIpc_Active;
reg         __shIpc_InProgress;
reg         __shIpc_Time2Shutdown;
reg [31:0]  __shIpc_Status;
reg         __shIpc_CheckpointEnable;

initial begin
  #1 __mSlotId              = MY_SLOT_ID;
  __mCpuId                  = MY_CPU_ID;

  __shIpc_cmd               = 0;
  __shIpc_address           = 0;
  __shIpc_p0                = 0;
  __shIpc_p1                = 0;
  __shIpc_p2                = 0;
  __shIpc_p3                = 0;
  __shIpc_p4                = 0;
  __shIpc_p5                = 0;
  __shIpc_p6                = 0;
  __shIpc_p7                = 0;
  __shIpc_cmdValid          = 0;
  __shIpc_remoteReq         = 0;
  __shIpc_EnableMode        = 0;
  __shIpc_Active            = 1;
  __shIpc_InProgress        = 0; 
  __shIpc_Time2Shutdown     = 0;    
  __shIpc_Status            = 0;
  __shIpc_CheckpointEnable  = 0; 
end

//--------------------------------------------------------------------------------------
// Process a received mailbox command
//--------------------------------------------------------------------------------------
task processCmd;
  begin
    case (__shIpc_cmd)
      // ATOMIC_RDW64
      `SHIPC_ATOMIC_RDW64 : begin 
        `ifdef SHIPC_ATOMIC_RDW64_TASK
          `SHIPC_ATOMIC_RDW64_TASK;
          `undef SHIPC_ATOMIC_RDW64_TASK
        `else
          unsupportedCommand("SHIPC_ATOMIC_RDW64");
        `endif
      end
      // WRITE64_BURST
      `SHIPC_WRITE64_BURST : begin 
        `ifdef SHIPC_WRITE64_BURST_TASK
          `SHIPC_WRITE64_BURST_TASK;
          `undef SHIPC_WRITE64_BURST_TASK
        `else
          unsupportedCommand("SHIPC_WRITE64_BURST");
        `endif
      end
      // WRITE32_64
      `SHIPC_WRITE32_64 : begin 
        `ifdef SHIPC_WRITE32_64_TASK
          `SHIPC_WRITE32_64_TASK;
          `undef SHIPC_WRITE32_64_TASK
        `else
          unsupportedCommand("SHIPC_WRITE32_64");
        `endif
      end
      // WRITE32_32
      `SHIPC_WRITE32_32 : begin 
        `ifdef SHIPC_WRITE32_32_TASK
          `SHIPC_WRITE32_32_TASK;
          `undef SHIPC_WRITE32_32_TASK
        `else
          unsupportedCommand("SHIPC_WRITE32_32");
        `endif
      end
      // WRITE32_16
      `SHIPC_WRITE32_16 : begin 
        `ifdef SHIPC_WRITE32_16_TASK
          `SHIPC_WRITE32_16_TASK;
          `undef SHIPC_WRITE32_16_TASK
        `else
          unsupportedCommand("SHIPC_WRITE32_16");
        `endif
      end
      // WRITE32_8
      `SHIPC_WRITE32_8 : begin 
        `ifdef SHIPC_WRITE32_8_TASK
          `SHIPC_WRITE32_8_TASK;
          `undef SHIPC_WRITE32_8_TASK
        `else
          unsupportedCommand("SHIPC_WRITE32_8");
        `endif
      end
      // WRITE64_64
      `SHIPC_WRITE64_64 : begin 
        `ifdef SHIPC_WRITE64_64_TASK
          `SHIPC_WRITE64_64_TASK;
          `undef SHIPC_WRITE64_64_TASK
        `else
          unsupportedCommand("SHIPC_WRITE64_64");
        `endif
      end
      // READ32_8
      `SHIPC_READ32_8 : begin 
        `ifdef SHIPC_READ32_8_TASK
          `SHIPC_READ32_8_TASK;
          `undef SHIPC_READ32_8_TASK
        `else
          unsupportedCommand("SHIPC_READ32_8");
        `endif
      end
      // READ32_16
      `SHIPC_READ32_16 : begin 
        `ifdef SHIPC_READ32_16_TASK
          `SHIPC_READ32_16_TASK;
          `undef SHIPC_READ32_16_TASK
        `else
          unsupportedCommand("SHIPC_READ32_16");
        `endif
      end
      // READ32_32
      `SHIPC_READ32_32 : begin 
        `ifdef SHIPC_READ32_32_TASK
          `SHIPC_READ32_32_TASK;
          `undef SHIPC_READ32_32_TASK
        `else
          unsupportedCommand("SHIPC_READ32_32");
        `endif
      end
      // READ32_64
      `SHIPC_READ32_64 : begin 
        `ifdef SHIPC_READ32_64_TASK
          `SHIPC_READ32_64_TASK;
          `undef SHIPC_READ32_64_TASK
        `else
          unsupportedCommand("SHIPC_READ32_64");
        `endif
      end
      // READ64_64
      `SHIPC_READ64_64 : begin 
        `ifdef SHIPC_READ64_64_TASK
          `SHIPC_READ64_64_TASK;
          `undef SHIPC_READ64_64_TASK
        `else
          unsupportedCommand("SHIPC_READ64_64");
        `endif
      end
      // READ64_BURST
      `SHIPC_READ64_BURST : begin 
        `ifdef SHIPC_READ64_BURST_TASK
          `SHIPC_READ64_BURST_TASK;
          `undef SHIPC_READ64_BURST_TASK
        `else
          unsupportedCommand("SHIPC_READ64_BURST");
        `endif
      end
      // PRINTF
      `SHIPC_PRINTF : begin 
        `ifdef SHIPC_PRINTF_TASK
          `SHIPC_PRINTF_TASK;
          `undef SHIPC_PRINTF_TASK
        `else
          unsupportedCommand("SHIPC_PRINTF");
        `endif
      end
      // WRITE_STATUS
      `SHIPC_WRITE_STATUS : begin 
        `ifdef SHIPC_WRITE_STATUS_TASK
          `SHIPC_WRITE_STATUS_TASK;
          `undef SHIPC_WRITE_STATUS_TASK
        `else
          unsupportedCommand("SHIPC_WRITE_STATUS");
        `endif
      end
      // READ_STATUS
      `SHIPC_READ_STATUS : begin 
        `ifdef SHIPC_READ_STATUS_TASK
          `SHIPC_READ_STATUS_TASK;
          `undef SHIPC_READ_STATUS_TASK
        `else
          unsupportedCommand("SHIPC_READ_STATUS");
        `endif
      end
      // WRITE_DVT_FLAG
      `SHIPC_WRITE_DVT_FLAG : begin 
        `ifdef SHIPC_WRITE_DVT_FLAG_TASK
          `SHIPC_WRITE_DVT_FLAG_TASK;
          `undef SHIPC_WRITE_DVT_FLAG_TASK
        `else
          unsupportedCommand("SHIPC_WRITE_DVT_FLAG");
        `endif
      end
      // READ_DVT_FLAG
      `SHIPC_READ_DVT_FLAG : begin 
        `ifdef SHIPC_READ_DVT_FLAG_TASK
          `SHIPC_READ_DVT_FLAG_TASK;
          `undef SHIPC_READ_DVT_FLAG_TASK
        `else
          unsupportedCommand("SHIPC_READ_DVT_FLAG");
        `endif
      end
      // SHIPC_READ_ERROR_CNT
      `SHIPC_READ_ERROR_CNT : begin 
        `ifdef SHIPC_READ_ERROR_CNT_TASK
          `SHIPC_READ_ERROR_CNT_TASK;
          `undef SHIPC_READ_ERROR_CNT_TASK
        `else
          unsupportedCommand("SHIPC_READ_ERROR_CNT");
        `endif
      end
      // FRAMER_RDWR
      `SHIPC_FRAMER_RDWR : begin 
        `ifdef SHIPC_FRAMER_RDWR_TASK
          `SHIPC_FRAMER_RDWR_TASK;
          `undef SHIPC_FRAMER_RDWR_TASK
        `else
          unsupportedCommand("SHIPC_FRAMER_RDWR");
        `endif
      end
      // SHIPC_SAMPLE_RDWR
      `SHIPC_SAMPLE_RDWR : begin 
        `ifdef SHIPC_SAMPLE_RDWR_TASK
          `SHIPC_SAMPLE_RDWR_TASK;
          `undef SHIPC_SAMPLE_RDWR_TASK
        `else
          unsupportedCommand("SHIPC_SAMPLE_RDWR");
        `endif
      end
      // WRITE_DVT_FLAG
      `SHIPC_WRITE_DVT_FLAG : begin 
        `ifdef SHIPC_WRITE_DVT_FLAG_TASK
          `SHIPC_WRITE_DVT_FLAG_TASK;
          `undef SHIPC_WRITE_DVT_FLAG_TASK
        `else
          unsupportedCommand("SHIPC_WRITE_DVT_FLAG");
        `endif
      end
      // READ_DVT_FLAG
      `SHIPC_READ_DVT_FLAG : begin 
        `ifdef SHIPC_READ_DVT_FLAG_TASK
          `SHIPC_READ_DVT_FLAG_TASK;
          `undef SHIPC_READ_DVT_FLAG_TASK
        `else
          unsupportedCommand("SHIPC_READ_DVT_FLAG");
        `endif
      end

      // Common Tasks
      `SHIPC_GET_SIM_TIME     : r_data                    = {2{`SYSTEM_SIM_TIME}};
      `SHIPC_RUNCLK           : RUNCLK(__shIpc_p0);
      `SHIPC_SHUTDOWN         : __shIpc_Time2Shutdown     = 1;
      `SHIPC_SIMV_SAVE        : __shIpc_CheckpointEnable  = 1;
      `SHIPC_READ_STATUS      : __shIpc_p0                = __shIpc_Status;
      // Trap
      default                 : `logE("ERROR: %m __shIpc_cmd=%x NOT SUPPORTED!!!!\n",__shIpc_cmd);
    endcase
  end
endtask // processCmd
//--------------------------------------------------------------------------------------



//--------------------------------------------------------------------------------------
// Process DPI commands
//--------------------------------------------------------------------------------------
always @(posedge (__shIpc_EnableMode)) 
begin

  @(posedge `SHIPC_CLK ); // wait 1 clock
  `logI("Entering shIpc_EnableMode Loop simTime = %0d", `SYSTEM_SIM_TIME);
  while (__shIpc_EnableMode) begin
    // get the command
    get_v2c_mail(__mSlotId, __mCpuId,inBox);
    __shIpc_cmdValid       = inBox.mCmdValid;

    if (inBox.mActive == 0) 
      __shIpc_Active         = 0; // inBox.mActive;       

    // process the command
    if (__shIpc_InProgress && !__shIpc_Active) begin
      __shIpc_EnableMode      = 0; 
      __shIpc_InProgress      = 0;
      __shIpc_Active          = 1;
    end 
    
    if (inBox.mCmdValid) begin
      __shIpc_remoteReq       = inBox.mRemoteReq;
      __shIpc_cmd             = inBox.mCmd;
      __shIpc_InProgress      = 1;
      
      processCmd;

      inBox.mCmdValid         = 0;
      inBox.mRemoteReq        = 0;
      send_v2c_mail(__mSlotId, __mCpuId,inBox);
    end // if (inBox.mCmdValid)
  end // while (__shIpc_EnableMode)
end // end posedge
//--------------------------------------------------------------------------------------



//--------------------------------------------------------------------------------------
// DPI tasks and support functions
//--------------------------------------------------------------------------------------
//  Shutdown the simulation
always @(posedge __shIpc_Time2Shutdown) begin
  `logI("Running for %d more NS before terminate the simv process");
   #10 $finish;
end

// An unsupported command was received
task unsupportedCommand;
  input string str; 
  begin 
    `logE("ERROR: %m Command %s NOT SUPPORTED for this module.\n", str); 
  end
endtask

// Run the clock a specified number of clock cycles
task RUNCLK;
  input [31:0] clkCnt;
  begin
    repeat(inBox.mPar[0]) @(posedge `SHIPC_CLK);
    inBox.mPar[0] = `SYSTEM_SIM_TIME;
  end
endtask // RUNCLK

// Intialize the shared memory for this driver
reg myIsActive  = 0;
always @(posedge enableMe) begin
  $vpp_shMemInit(-1); // use key in file

  // check if my master (C-side) is on
  #10;

  $vpp_isCActive(`SHIPC_XACTOR_ID, myIsActive);
  if (myIsActive) begin
     // wait until C-side is alive
     `logI("Calling $vpp_WaitTilStart slot = %0d cpu = %0d", MY_SLOT_ID, MY_CPU_ID);
     $vpp_WaitTilStart(MY_SLOT_ID, MY_CPU_ID);
     `logI("Turning ON __shIpc_EnableMode simTime = %0d", `SYSTEM_SIM_TIME);
    __shIpc_EnableMode = 1;
   end
   else begin
    `logI("Turning OFF __shIpc_EnableMode simTime = %0d", `SYSTEM_SIM_TIME);
    __shIpc_EnableMode = 0;
   end  
end 
//--------------------------------------------------------------------------------------

