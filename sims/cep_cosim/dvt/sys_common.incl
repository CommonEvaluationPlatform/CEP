//--------------------------------------------------------------------------------------
// Copyright 2021 Massachusetts Institute of Technology
// SPDX short identifier: BSD-2-Clause
//
// File Name:      sys_common.incl
// Program:        Common Evaluation Platform (CEP)
// Description:    Defines items associated with the System Mailbox
// Notes:          This must be included within a verilog module
//
//--------------------------------------------------------------------------------------
`include "dpi_common.incl"

reg [3:0]   __mSlotId;
reg [3:0]   __mCpuId;
reg [31:0]  __shIpc_cmd;
reg [63:0]  __shIpc_address;
reg [31:0]  __shIpc_p0;
reg [31:0]  __shIpc_p1;
reg [31:0]  __shIpc_p2;
reg [31:0]  __shIpc_p3;
reg [31:0]  __shIpc_p4;
reg [31:0]  __shIpc_p5;
reg [31:0]  __shIpc_p6;
reg [31:0]  __shIpc_p7;
reg         __shIpc_cmdValid;
reg         __shIpc_remoteReq;
reg         __shIpc_EnableMode;
reg         __shIpc_Active;
reg         __shIpc_InProgress;
reg         __shIpc_Time2Shutdown;
reg [31:0]  __shIpc_Status;
reg         __shIpc_CheckpointEnable;
reg [31:0]  __simTime;

initial begin
  #1 __mSlotId              = MY_SLOT_ID;
  __mCpuId                  = MY_CPU_ID;

  __shIpc_cmd               = 0;
  __shIpc_address           = 0;
  __shIpc_p0                = 0;
  __shIpc_p1                = 0;
  __shIpc_p2                = 0;
  __shIpc_p3                = 0;
  __shIpc_p4                = 0;
  __shIpc_p5                = 0;
  __shIpc_p6                = 0;
  __shIpc_p7                = 0;
  __shIpc_cmdValid          = 0;
  __shIpc_remoteReq         = 0;
  __shIpc_EnableMode        = 0;
  __shIpc_Active            = 1;
  __shIpc_InProgress        = 0; 
  __shIpc_Time2Shutdown     = 0;    
  __shIpc_Status            = 0;
  __shIpc_CheckpointEnable  = 0;

  __simTime                 = 0;
end

// Advance the system time
always @(posedge `SHIPC_CLK ) __simTime = __simTime + 1;

//--------------------------------------------------------------------------------------
// System Driver DPI interface & Mailbox processing
//--------------------------------------------------------------------------------------
always @(posedge __shIpc_EnableMode) begin
  @(posedge `SHIPC_CLK); // wait 1 clock
  `logI("Entering shIpc_EnableMode Loop simTime = %0d", `SYSTEM_SIM_TIME);  
  while (__shIpc_EnableMode) begin
     // get the command
    get_v2c_mail(__mSlotId, __mCpuId, inBox);
    __shIpc_cmdValid       = inBox.mCmdValid;
    if (inBox.mActive == 0) 
       __shIpc_Active         = 0; // inBox.mActive;
     
    // thread done?
    if (__shIpc_InProgress && !__shIpc_Active) 
      __shIpc_EnableMode = 0;
      
    if (inBox.mCmdValid) begin
      __shIpc_InProgress = 1;
        
      case (inBox.mCmd)
        // WRITE32_64
        `SHIPC_WRITE32_64       : begin 
          `ifdef SHIPC_WRITE32_64_TASK
              `SHIPC_WRITE32_64_TASK;
              `undef SHIPC_WRITE32_64_TASK
          `else
              unsupportedCommand("SHIPC_WRITE32_64");
          `endif
        end
        // WRITE64_64
        `SHIPC_WRITE64_64       : begin 
          `ifdef SHIPC_WRITE64_64_TASK
            `SHIPC_WRITE64_64_TASK;
            `undef SHIPC_WRITE64_64_TASK
          `else
            unsupportedCommand("SHIPC_WRITE64_64");
          `endif
        end    
        // READ32_64
        `SHIPC_READ32_64        : begin 
          `ifdef SHIPC_READ32_64_TASK
            `SHIPC_READ32_64_TASK;
            `undef SHIPC_READ32_64_TASK
          `else
            unsupportedCommand("SHIPC_READ32_64");
          `endif
        end    
        // READ64_64
        `SHIPC_READ64_64        : begin 
          `ifdef SHIPC_READ64_64_TASK
            `SHIPC_READ64_64_TASK;
            `undef SHIPC_READ64_64_TASK
          `else
            unsupportedCommand("SHIPC_READ64_64");
          `endif
        end
        // PRINTF
        `SHIPC_PRINTF : begin 
          `ifdef SHIPC_PRINTF_TASK
            `SHIPC_PRINTF_TASK;
            `undef SHIPC_PRINTF_TASK
          `else
            unsupportedCommand("SHIPC_PRINTF");
          `endif
        end          
        // WRITE_DVT_FLAG
        `SHIPC_WRITE_DVT_FLAG : begin 
          `ifdef SHIPC_WRITE_DVT_FLAG_TASK
            `SHIPC_WRITE_DVT_FLAG_TASK;
            `undef SHIPC_WRITE_DVT_FLAG_TASK
          `else
            unsupportedCommand("SHIPC_WRITE_DVT_FLAG");
          `endif
        end
        // READ_DVT_FLAG
        `SHIPC_READ_DVT_FLAG : begin 
          `ifdef SHIPC_READ_DVT_FLAG_TASK
            `SHIPC_READ_DVT_FLAG_TASK;
            `undef SHIPC_READ_DVT_FLAG_TASK
          `else
            unsupportedCommand("SHIPC_READ_DVT_FLAG");
          `endif
        end
        // Common Tasks
        `SHIPC_GET_SIM_TIME     : r_data                    = {2{`SYSTEM_SIM_TIME}};
        `SHIPC_RUNCLK           : RUNCLK(__shIpc_p0);  
        `SHIPC_SHUTDOWN         : __shIpc_Time2Shutdown = 1;
        `SHIPC_READ_STATUS      : __shIpc_p0 = __shIpc_Status;
        default                 : `logE("ERROR: %m __shIpc_cmd = %x NOT SUPPORTED!!!!\n",__shIpc_cmd);
      endcase

      // return data & complete the command
      inBox.mCmdValid          = 0; 
      inBox.mRemoteReq         = 0;
      send_v2c_mail(__mSlotId, __mCpuId, inBox);
      
    // end if valid
    end else if (ipcDelay) begin // to help speedup backdoor loading
      @(posedge `SHIPC_CLK); // wait 1 clock 
    end // else if (ipcDelay)

  end // while
end // end posedge


task unsupportedCommand;
  input string str; 
begin 
  `logE("ERROR: %m Command %s NOT SUPPORTED for this module.\n", str);
end
endtask

task RUNCLK;
  input [31:0] clkCnt;
begin
  repeat(inBox.mPar[0]) @(posedge `SHIPC_CLK);
  inBox.mPar[0] = `SYSTEM_SIM_TIME;
end
endtask // RUNCLK
 
// Task to kill the sim job
`ifdef MODELSIM
  import mti_fli::*;
`endif

// For shutting down the simulation
always @(posedge __shIpc_Time2Shutdown) begin
  `logI("Running for 1 more NS before terminate the simv process");
  `ifdef COVERAGE
    `logI("Dumping coverage data");
    `ifdef MODELSIM
      mti_Command("dump_coverage");    
    `endif
  `endif
  
  #10 $finish;
end

// The system driver is ALWAYS enabled
initial begin
  __shIpc_EnableMode = 0;
  #1;
  __shIpc_EnableMode = 1;      
end

