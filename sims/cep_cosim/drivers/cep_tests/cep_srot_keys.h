//************************************************************************
// Copyright 2021 Massachusetts Institute of Technology
// SPDX License Identifier: BSD-2-Clause
//
// File Name:      cep_srot.cc/h
// Program:        Common Evaluation Platform (CEP)
// Description:    SRoT class for CEP
// Notes:          
//************************************************************************

#ifndef cep_srot_keys_H
#define cep_srot_keys_H

#include "stdint.h"

#define INVERT_ALL_BITS  1
#define INVERT_ALTERNATE 2

// Include all core unlock keys here.
// Mock TSS keys are defined in llki_pkg.sv, and duplicated here.
const uint64_t  AES_MOCK_TSS_KEY[]     = {
  0xAE53456789ABCDEF,
  0xFEDCBA9876543210
};

const uint64_t  DES3_MOCK_TSS_KEY[]    = {
  0xDE53456789ABCDEF
};

const uint64_t  SHA256_MOCK_TSS_KEY[]  = {
  0x54A3456789ABCDEF,
  0xFEDCBA9876543210,
  0x0123456789ABCDEF,
  0xFEDCBA9876543210,
  0x0123456789ABCDEF,
  0xFEDCBA9876543210,
  0x0123456789ABCDEF,
  0xFEDCBA9876543210
};

const uint64_t  MD5_MOCK_TSS_KEY[]     = {
  0x3D53456789ABCDEF,
  0xFEDCBA9876543210,
  0x0123456789ABCDEF,
  0xFEDCBA9876543210,
  0x0123456789ABCDEF,
  0xFEDCBA9876543210,
  0x0123456789ABCDEF,
  0xFEDCBA9876543210
};

const uint64_t  RSA_MOCK_TSS_KEY[]     = {
  0x45A3456789ABCDEF
};

const uint64_t  IIR_MOCK_TSS_KEY[]     = {
  0x1143456789ABCDEF
};

const uint64_t  FIR_MOCK_TSS_KEY[]     = {
  0xF143456789ABCDEF
};

const uint64_t  DFT_MOCK_TSS_KEY[]     = {
  0xDF73456789ABCDEF
};

const uint64_t  IDFT_MOCK_TSS_KEY[]    = {
  0x1DF7456789ABCDEF
};

const uint64_t  GPS_MOCK_TSS_KEY[]     = {
  0x6953456789ABCDEF,
  0xFEDCBA9876543210,
  0x0123456789ABCDEF,
  0xFEDCBA9876543210,
  0x0123456789ABCDEF
};

// Configuration bitstream for the CMU-redacted GPS core
// Per CEPConfigs.scala, it is @ gps_1_base_address
// (which corresponds to core index 12)
const uint64_t  CMU_GPS_TSS_KEY[]       = {
  0x0124924924924924,
  0x9249249249249249,
  0x2492492492492492,
  0x4924924924924924,
  0x9249249249249249,
  0x2492492492492492,
  0x48AB2034FA017923,
  0x6B603B5342F62369,
  0x112112C088B0305C,
  0x00D7AFBBC0547012,
  0x3EAFBE133D27FE38,
  0x3FF80C4BFFD193D2,
  0x93E7E2E2E2C8889A,
  0xCACB3F001111BCF0,
  0x1FC30FFF33F47C2B,
  0x8E9BFE8BFEBF3D20,
  0x123A12BCA330305A,
  0x65B4444FBBBB5050,
  0x659A521EDC014213,
  0x3C27FE283FE8158B,
  0xFFD393D093E7E1B8,
  0xB8C888ACACABF030,
  0x1111BCF01FC30FFF,
  0x33A1B53FD0015300,
  0x10082C0800090009,
  0x10FE00956AB10151,
  0x00030415C0517AEB,
  0xFC0517CFBDBE7C15,
  0x9D8BFDBF3FE03E82,
  0x13CCA33030FEBE96,
  0x996D1113505070F0,
  0xD41EBC00C37070BB,
  0x8C67FFE7E71BFE3D,
  0x0520133FF6040048,
  0x003EEEECCC03EEEE,
  0x800150020D5403E0,
  0xBC006BE33D4BCFC5,
  0x8BF792BE93D3E330,
  0x309A65B30303B800,
  0xF0C0BCF01FA50FFF,
  0x31ABDDAFFDAFF0B8,
  0xBC73FE99EBE610CB,
  0x2EEE448888AEE44B,
  0x2B2A666620002000,
  0x3000219AB3F7CEB3,
  0xFEBFE620843C2328,
  0x52BFED0002FFF33E,
  0xEEEFFEA980008001,
  0x50040D540348BFCA,
  0xAA8ABE88FF2A7FF9,
  0xAFF19DBE5EE2E2BF,
  0x0C2E2E2AE2E2ACAC,
  0xBC332FC30ABE83E0,
  0x67E337E2907FD7E2,
  0x0F13FFE2133FE2F3,
  0xC0BCF02F3C000155,
  0xF3C0FBBB9FC30D54,
  0x03FFFFFFFFFFFFFF,
  0xFFFFFFFFFFFFFFFF,
  0xFF0000C00030000C,
  0x00030000C0003000,
  0x0C0003FF9775BE8B,
  0x3FF4579ABFF453F7,
  0x13D3E20FF0AE2E2E,
  0x4E4BF0C0E0E0BCF0,
  0x1FC30CCC0202A94F,
  0xFDBF3C1778F99203,
  0xFED041A1140010C8,
  0x88BFAFA400056996,
  0x599991441EFFFFF3,
  0xBFF33C374D1D3FCA,
  0x7FF07F9213F3D7FC,
  0xFCCC0C0800080407,
  0x0C0CFF3F00020CCC,
  0x00C20830A023A029,
  0x090AA8206C80A284,
  0x88B212EA18090899,
  0x101C40F6C07B6558,
  0x1E8205E02C0F0CB2,
  0x8028400C07172051,
  0x67130BDB0C041430,
  0x50E34C9DD2015247,
  0x2011D4881804002C,
  0xD80077C444D43804,
  0x80130B0200007900,
  0xF02900AA0C828340,
  0x0002947850540880,
  0x8B16A15002AAAC05,
  0x4004260419549244,
  0x1014052005D54641,
  0x411A511710150065,
  0xE612000018232038,
  0x01680143145A030C,
  0x8020042F00365967,
  0x002AC8E410516F7E,
  0x824CC0027806180C,
  0xC840804080280000,
  0x40045028DFA09BB0,
  0x19E01802F00010BE,
  0x8F60382C924C20A0,
  0x2A7B2932D42CD248,
  0x9828101262B600C2,
  0x0000000000000800,
  0x0200000000000004,
  0x6000110000600004,
  0x00000202E0004059,
  0x8003E12A5B1B650D,
  0x3023000000000000,
  0x0000000000000004,
  0x0000000800510000,
  0x0984000000730000,
  0xDD84028000406C00,
  0x0E1D467B0000030C,
  0x0000209F5F1C0000,
  0x1C00000000000401,
  0x64C19C0580010800,
  0x805015A901004000,
  0xB8217A6247400692,
  0x08C30086028EAE00,
  0x0001000000000000,
  0xC07006E0202E005C,
  0x001C0000E09FD200,
  0x0028005000018D00,
  0x00000B180005F4BA,
  0x3100000000000000,
  0x0000000000000000
};


//Key info struct for unlocking LLKI cores.
typedef struct cep_key_info_t {
    const char      *name;              //
    const uint64_t  *keyData;           // Actual Key Bits
    const uint64_t  lowPointer;         // Lower bound of where key will be loaded into KeyRAM
    const uint64_t  highPointer;        // Upper bound of where key will be loaded into KeyRAM
    const int       invertType;         // 
} cep_key_info_t;

// Number of LLKI cores for MacroMix to cover. 
// Don't include SROT or CEP Version "cores", which must be the last ones in this list.
#define CEP_LLKI_CORES 16
    
//
// Array of keys and key lengths (number of 64 bit words)
// index in array == core index
// The order defined here **MUST** correspond to those
// defined in DevKitConfigs.scala
//
// KeyLength = High Pointer - Low Pointer + 1
//
const cep_key_info_t KEY_DATA[CEP_LLKI_CORES] = {
  {"AES",      AES_MOCK_TSS_KEY,      0,   1,   INVERT_ALL_BITS},
  {"MD5",      MD5_MOCK_TSS_KEY,      2,   9,   INVERT_ALL_BITS},
  {"SHA256.0", SHA256_MOCK_TSS_KEY,  10,  17,   INVERT_ALL_BITS},
  {"SHA256.1", SHA256_MOCK_TSS_KEY,  18,  25,   INVERT_ALL_BITS},
  {"SHA256.2", SHA256_MOCK_TSS_KEY,  26,  33,   INVERT_ALL_BITS},
  {"SHA256.3", SHA256_MOCK_TSS_KEY,  34,  41,   INVERT_ALL_BITS},
  {"RSA",      RSA_MOCK_TSS_KEY,     42,  42,   INVERT_ALL_BITS},
  {"DES3",     DES3_MOCK_TSS_KEY,    43,  43,   INVERT_ALL_BITS},
  {"DFT",      DFT_MOCK_TSS_KEY,     44,  44,   INVERT_ALL_BITS},
  {"IDFT",     IDFT_MOCK_TSS_KEY,    45,  45,   INVERT_ALL_BITS},
  {"FIR",      FIR_MOCK_TSS_KEY,     46,  46,   INVERT_ALTERNATE},
  {"IIR",      IIR_MOCK_TSS_KEY,     47,  47,   INVERT_ALTERNATE},
  {"GPS.0",    GPS_MOCK_TSS_KEY,     48,  52,   INVERT_ALL_BITS},
  {"GPS.1",    CMU_GPS_TSS_KEY,      53, 179,   INVERT_ALL_BITS},
  {"GPS.2",    GPS_MOCK_TSS_KEY,    180, 184,   INVERT_ALL_BITS},
  {"GPS.3",    GPS_MOCK_TSS_KEY,    185, 189,   INVERT_ALL_BITS}
};

#endif
