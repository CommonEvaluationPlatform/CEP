#!/bin/bash

## Version: 2020_06_04
## Author : Daniel Bayer
## Email  : danielb@cadence.com

####################################################################################################
## License: 
## ----------------------------------------------------------------------------
##----------------------------------------------------------------------
##   Copyright 2020 Cadence Design Systems, Inc.
##   All Rights Reserved Worldwide
##
##   Licensed under the Apache License, Version 2.0 (the
##   "License"); you may not use this file except in
##   compliance with the License.  You may obtain a copy of
##   the License at
##
##       http://www.apache.org/licenses/LICENSE-2.0
##
##   Unless required by applicable law or agreed to in
##   writing, software distributed under the License is
##   distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
##   CONDITIONS OF ANY KIND, either express or implied.  See
##   the License for the specific language governing
##   permissions and limitations under the License.
####################################################################################################

echo "============================================================================="
echo "==                     vManager DB Backup Script                           =="
echo "============================================================================="
echo "== For questions, please contact:     danielb@cadence.com                  =="
echo "============================================================================="
echo "(INFO) Checking for configured vManager root installation...                 "
export VMGR_ROOT_INSTALLATION=`vm_root`

## Setting the path to all the administration tools in vManager installation folder
export PATH=${VMGR_ROOT_INSTALLATION}/tools/vmgr/admin:${PATH}

echo ""
echo "(INFO) Checking for configured Xcelium root installation...                  "
export XCELIUM_ROOT_INSTALLATION=`xmroot`

## Basic sanity checking to avoid any surprises along the road
echo ""
if [[ -z ${VMGR_ROOT_INSTALLATION} ]]; then
    echo "(ERROR) There was no PATH to vManager executables found. Please set the PATH variable to include vManager's executables."
    exit 1
fi
echo "(INFO) Using vManager installation ${VMGR_ROOT_INSTALLATION}"

echo ""
if [[ -z ${CDS_LIC_FILE} ]]; then
    echo "(ERROR) The \${CDS_LIC_FILE} variable is empty. Please set the variable to point to your license file/server to be able to launch the server setup."
    exit 1
fi
echo "(INFO) Using licenses from ${CDS_LIC_FILE}"

echo ""
if [[ -z ${XCELIUM_ROOT_INSTALLATION} ]]; then
    echo "(WARNING) There was no Xcelium installation found. To enable coverage analysis, the Coverage Engine must be configured for this project."
else 
    echo "(INFO) Using Xcelium installation ${XCELIUM_ROOT_INSTALLATION}"
fi

#################################################################################################################################################################
## Parsing the command-line arguments

while [[ $# -gt 0 ]]; do
	key="${1}"

	case ${key} in
		-h|--help)
			shift # remove single argument
            echo "(INFO) vmanager_db_admin_wal_setup options are:"
            echo "(INFO)    -h | --help                              : Prints this help text"
            echo "(INFO)"
            echo "(INFO)   Mandatory options. If not specified, an error will be issued."
            echo "(INFO)    -db_dir <PATH>                           : The <PATH> must be pointing to the folder containing the Postgres DB folder"
            echo "(INFO)                                               is needed to select the Postgres DB to be augmented with incremental backup."
            echo "(INFO)    -db_port <NUMBER>                        : The <NUMBER> must be the Postgres DB port that is currently used."
            echo "(INFO)"
            echo "(INFO)   Subsequent options are all optional and will use default values, if they were not specified."
            echo "(INFO)    -db_config_dir <PATH>                    : The <PATH> must be pointing to a newly created incremental backup configuration folder"
            echo "(INFO)                                               If option is not used, default <USER_NAME> is            \"\`pwd\`/vmgr_db_backup_config\": `pwd`/vmgr_db_backup_config "
            echo "(INFO)    -db_super_user <USER_NAME>               : The <USER_NAME> is the name that was used during the setup of the current Postgres DB"
            echo "(INFO)                                               If option is not used, default <USER_NAME> is            \"postgres\" "
            echo "(INFO)    -db_notification_emails <EMAIL_ADDRESS>  : The <EMAIL_ADDRESS> is used as target email to receive any notifications."
            echo "(INFO)                                               If option is not used, default <EMAIL_ADDRESS> is        empty "
            echo "(INFO)    -db_name <DB_NAME>                       : The <DB_NAME> must contain the name of the vManager project that shall be using incremental backup."
            echo "(INFO)                                               If option is not used, default project/<DB_NAME> is      \"vmgr\" "
            echo "(INFO)    -db_user <USER_NAME>                     : The <USER_NAME> is usually the name that has been used to setup the current Postgres DB"
            echo "(INFO)                                               If option is not used, default <USER_NAME> is            \"postgres\" "
            echo "(INFO)"
            exit 0
			;;
		-db_config_dir)
			shift # remove the -db_config_dir
			export DB_CONFIG_DIR=${1}
			shift # remove the argument
			echo "(INFO) Using DB_CONFIG_DIR folder                                                        : ${DB_CONFIG_DIR}"
			;;
		-db_super_user)
			shift # remove the -db_super_user
			export DB_SUPER_USER=${1}
			shift # remove the argument
			echo "(INFO) Using DB_SUPER_USER ID                                                            : ${DB_SUPER_USER}"
			;;
		-db_notification_emails)
			shift # remove -db_notification_emails
			export DB_NOTIFICATION_EMAILS=${1}
			shift # remove the argument
			echo "(INFO) Using DB_NOTIFICATION_EMAILS                                                      : ${DB_NOTIFICATION_EMAILS}"
			;;
		-db_dir)
			shift # remove -db_dir
			export DB_DIR=${1}
			shift # remove the argument
			echo "(INFO) Using the configured DB_DIR                                                       : ${DB_DIR}"
			;;
		-db_name)
			shift # remove -db_name
			export DB_NAME=${1}
			shift # remove the argument
			echo "(INFO) Using database name DB_NAME                                                       : ${DB_NAME}"
			;;
		-db_port)
			shift # remove -db_port
			export DB_PORT=${1}
			shift # remove the argument
			echo "(INFO) Using database port DB_PORT                                                       : ${DB_PORT}"
			;;
		-db_user)
			shift # remove -db_user
			export DB_USER=${1}
			shift # remove the argument
			echo "(INFO) Using database user DB_USER                                                       : ${DB_USER}"
			;;
		*) # default is also unknown option
			echo "(ERROR): Unknown argument ${key} found. Please remove it from the script and run again"
			exit 1
			;;
	esac
done

###############################################################################################################################################
## These Parameters must be given by the user as a bare minimum
if [[ -z "${DB_DIR}" ]]; then
    echo "(ERROR) Option -db_dir <PATH_TO_DB> not provided. Please provide the path to the vManager Postgres DB (ie. ${PWD}/db)"
    exit 1
fi

if [[ -z "${DB_PORT}" ]]; then
    echo "(ERROR) Option -db_port <PORT_NUMBER> not provided. Please provide the vManager Postgres DB port number (ie. 5432)"
    exit 1
fi

###############################################################################################################################################
## These parameters will be derived automatically.
if [[ -z "${DB_CONFIG_DIR}" ]]; then
    export DB_CONFIG_DIR=`pwd`/vmgr_db_backup_config
    echo "(INFO) Option -db_config_dir <PATH_TO_CONFIG_DIR> not provided.=> Using default value    : ${DB_CONFIG_DIR}"
fi

if [[ -z "${DB_SUPER_USER}" ]]; then
    export DB_SUPER_USER=postgres
    echo "(INFO) Option -db_super_user <PG_USER> not provided.=> Using default value               : ${DB_SUPER_USER}"
fi

if [[ -z "${DB_NOTIFICATION_EMAILS}" ]]; then
    export DB_NOTIFICATION_EMAILS=
    echo "(INFO) Option -db_notification_emails <EMAIL_ADDRESS> not provided.=> Using default value: ${DB_NOTIFICATION_EMAILS}"
fi

if [[ -z "${DB_NAME}" ]]; then
    export DB_NAME=vmgr
    echo "(INFO) Option -db_name <BACKUP_DB_NAME> not provided.=> Using default value              : ${DB_NAME}"
fi

if [[ -z "${DB_USER}" ]]; then
    export DB_USER=${DB_SUPER_USER}
    echo "(INFO) Option -db_user <DB_USER_NAME> not provided.=> Using default value                : ${DB_USER}"
fi

if [[ -z "${VMGR_VERSION}" ]]; then
    export VMGR_VERSION=`vmanager -version | cut -d ':' -f2 | tr -d " "`
    echo "(INFO) Option -vmgr_version <VERSION_NUMBER> not provided.=> Using default value         : ${VMGR_VERSION}"
fi


## Create the folder structure to store the configuration in there
echo "(INFO) Creating DB Backup configuration..."
mkdir ${DB_CONFIG_DIR}
chmod 755 ${DB_CONFIG_DIR}
mkdir ${DB_CONFIG_DIR}/work
chmod 775 ${DB_CONFIG_DIR}/work
mkdir ${DB_CONFIG_DIR}/t_wal
chmod 775 ${DB_CONFIG_DIR}/t_wal
mkdir ${DB_CONFIG_DIR}/t_bkp
chmod 775 ${DB_CONFIG_DIR}/t_bkp
mkdir ${DB_CONFIG_DIR}/t_wal_2
chmod 775 ${DB_CONFIG_DIR}/t_wal_2
mkdir ${DB_CONFIG_DIR}/t_bkp_2
chmod 775 ${DB_CONFIG_DIR}/t_bkp_2

## Create the configuration.txt file
echo "(INFO) Writing DB Backup configuration.txt file: ${DB_CONFIG_DIR}/configuration.txt"

echo "postgresql_username=${DB_SUPER_USER}"             >  ${DB_CONFIG_DIR}/configuration.txt
echo "email=${DB_NOTIFICATION_EMAILS}"                  >> ${DB_CONFIG_DIR}/configuration.txt
echo "logfile_location=${DB_CONFIG_DIR}/work"           >> ${DB_CONFIG_DIR}/configuration.txt
echo "pg_dump_backup_dir=${DB_CONFIG_DIR}/work"         >> ${DB_CONFIG_DIR}/configuration.txt
echo "pg_root=${DB_DIR}"                                >> ${DB_CONFIG_DIR}/configuration.txt
echo "data_dir=${DB_DIR}"                               >> ${DB_CONFIG_DIR}/configuration.txt
echo "wal_dir=${DB_CONFIG_DIR}/t_wal"                   >> ${DB_CONFIG_DIR}/configuration.txt
echo "incremental_backup_dir=${DB_CONFIG_DIR}/work"     >> ${DB_CONFIG_DIR}/configuration.txt
echo "master_database=${DB_NAME}"                       >> ${DB_CONFIG_DIR}/configuration.txt
echo "slave_database=\"${DB_NAME}\"_slave"              >> ${DB_CONFIG_DIR}/configuration.txt
echo "backup_database=${DB_NAME}"                       >> ${DB_CONFIG_DIR}/configuration.txt
echo "wal_log_archive_dir=${DB_CONFIG_DIR}/t_wal"       >> ${DB_CONFIG_DIR}/configuration.txt
echo "wal_backup_user=base_backup_user"                 >> ${DB_CONFIG_DIR}/configuration.txt
echo "wal_base_backup_dir=${DB_CONFIG_DIR}/t_bkp"       >> ${DB_CONFIG_DIR}/configuration.txt
echo "postgresql_port=${DB_PORT}"                       >> ${DB_CONFIG_DIR}/configuration.txt
echo "vmanager_user=${DB_USER}"                         >> ${DB_CONFIG_DIR}/configuration.txt
echo "wal_base_backup_2_dir=${DB_CONFIG_DIR}/t_bkp_2"   >> ${DB_CONFIG_DIR}/configuration.txt
echo "wal_log_archive_2_dir=${DB_CONFIG_DIR}/t_wal_2"   >> ${DB_CONFIG_DIR}/configuration.txt


echo "(INFO) Successfully set up DB administrator level scripts. Please access these as below:"
if [[ -z "${DB_ADMIN_DIR}" ]]; then
    echo "(INFO)     \`vm_root\`/tools/vmgr/db_scripts/db_maintenance.sh ${DB_CONFIG_DIR}"
else 
    echo "(INFO)     ${VMGR_ROOT_INSTALLATION}/tools/vmgr/db_scripts/db_maintenance.sh ${DB_CONFIG_DIR}"
fi
