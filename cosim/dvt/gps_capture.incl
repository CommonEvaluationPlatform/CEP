//************************************************************************
// Copyright 2021 Massachusetts Institute of Technology
// SPDX short identifier: BSD-2-Clause
//
// File Name:      
// Program:        Common Evaluation Platform (CEP)
// Description:    
// Notes:          
//
//************************************************************************
//
// Capture gps's IO cycle-by-cycle 
//
`ifndef MKSTR
`define MKSTR(x) `"x`"
`endif
//
reg CaptureGPS_vector=0;
`define GPS_DATA_WIDTH   (192+32+48+72+4+8+4+16+(2*128))
`define GPS_OUTPUT_WIDTH (3+1+13+(2*128))
int GPS_sampleNum = 0;
int GPS_fd;
//
always @(posedge srot_start_capture) begin
   $display("Enable cycle-by-cycle capturing of GPS stimulus");	    
   // wait until it gets out of reset
   if (cep_tb.fpga.topDesign.topMod.gpsmodule.gps_mock_tss_inst.sync_rst_in)
     @(negedge cep_tb.fpga.topDesign.topMod.gpsmodule.gps_mock_tss_inst.sync_rst_in);
   // next clock
   @(posedge cep_tb.fpga.topDesign.topMod.gpsmodule.gps_mock_tss_inst.sys_clk_50);
   GPS_fd=$fopen("../../drivers/vectors/gps_stimulus.txt","w");
   captureGPS_Stimulus();   
end	

always @(posedge c2c_capture_enable[`DVTF_GPS_CAPTURE_EN_BIT]) begin
   CaptureGPS_vector=1;
end
//
always @(negedge c2c_capture_enable[`DVTF_GPS_CAPTURE_EN_BIT]) begin
   if (CaptureGPS_vector) begin
      CaptureGPS_vector=0;
      repeat (2) @(posedge cep_tb.fpga.topDesign.topMod.gpsmodule.gps_mock_tss_inst.sys_clk_50);
      $display("Stop Capturing GPS stimulus");
      $fwrite(GPS_fd,"};\n");
      $fwrite(GPS_fd,"`define GPS_SAMPLE_COUNT %d\n",GPS_sampleNum);      
      $fclose(GPS_fd);
      $system("gzip -f ../../drivers/vectors/gps_stimulus.txt");
   end	    
end
//
//
// 
   task captureGPS_Stimulus;
      reg [`GPS_DATA_WIDTH-1:0] temp;
      begin
	 GPS_sampleNum = 0;
	 $display("Capturing stimulus");	 
	 $fwrite(GPS_fd,"//************************************************************************\n");
	 $fwrite(GPS_fd,"// Copyright 2021 Massachusetts Institute of Technology\n");
	 $fwrite(GPS_fd,"//\n");		
	 $fwrite(GPS_fd,"// File Name:      GPS_stimulus.txt\n");
	 $fwrite(GPS_fd,"// Program:        Common Evaluation Platform (CEP)\n");
	 $fwrite(GPS_fd,"// Description:    GPS Core unit testbench stimulus\n");
	 $fwrite(GPS_fd,"// Notes:\n");        
	 $fwrite(GPS_fd,"//\n");
	 $fwrite(GPS_fd,"//************************************************************************\n");
	 $fwrite(GPS_fd,"// column#L1 : LLKI OUT  llkid_key_ready,llkid_key_complete,llkid_clear_key_ack\n");
	 $fwrite(GPS_fd,"// column#L2 : LLKI IN  llkid_key_valid, llkid_clear_key\n");
	 $fwrite(GPS_fd,"// column#L3 : LLKI IN  llkid_key_data\n");

	 $fwrite(GPS_fd,"// column#1  : IN  {gps_reset,startRound}\n");
	 $fwrite(GPS_fd,"// column#2  : IN  sv_num[5:0]\n");
	 // added by Brandon
	 $fwrite(GPS_fd,"// column#3  : IN  aes_key[191:0]\n");
	 $fwrite(GPS_fd,"// column#4  : IN  pcode_speeds[30:0]\n");
	 $fwrite(GPS_fd,"// column#5  : IN  pcode_initializers[47:0]\n");
         //
	 $fwrite(GPS_fd,"// column#6  : OUT l_code_valid\n");	 
	 $fwrite(GPS_fd,"// column#7  : OUT ca_code[12:0]\n");	 
	 $fwrite(GPS_fd,"// column#8  : OUT l_code[127:0]\n");
	 $fwrite(GPS_fd,"// column#9  : OUT p_code[127:0]\n");
	 //	 
	 $fwrite(GPS_fd,"`define GPS_DATA_WIDTH %s\n",`MKSTR(`GPS_DATA_WIDTH));
	 $fwrite(GPS_fd,"`define GPS_OUTPUT_WIDTH %s\n",`MKSTR(`GPS_OUTPUT_WIDTH));
	 $fwrite(GPS_fd,"reg [`GPS_DATA_WIDTH-1:0] GPS_buffer[] = {\n");
	 //
	 // wait until valid in to interleaver
	 while (srot_start_capture) begin
	    @(negedge cep_tb.fpga.topDesign.topMod.gpsmodule.gps_mock_tss_inst.sys_clk_50);
	    if (CaptureGPS_vector || !srot_stop_capture) begin
	    // MUST align to HEX number if _ is used!!!
	    if (GPS_sampleNum>0) begin
	       $fwrite(GPS_fd,"   ,");
            end else begin
	       $fwrite(GPS_fd,"    ");		 
            end
	    // MUST align to HEX number if _ is used!!!
	    $fwrite(GPS_fd,"'h%x_%x_%x_%x_%x_%x_%x_%x_%x_%x_%x_%x\n",
	    	    {1'b0,cep_tb.fpga.topDesign.topMod.gpsmodule.gps_mock_tss_inst.llkid_key_ready,
		     cep_tb.fpga.topDesign.topMod.gpsmodule.gps_mock_tss_inst.llkid_key_complete,
		     cep_tb.fpga.topDesign.topMod.gpsmodule.gps_mock_tss_inst.llkid_clear_key_ack},
		    {2'b0, cep_tb.fpga.topDesign.topMod.gpsmodule.gps_mock_tss_inst.llkid_key_valid,
		     cep_tb.fpga.topDesign.topMod.gpsmodule.gps_mock_tss_inst.llkid_clear_key},
		    cep_tb.fpga.topDesign.topMod.gpsmodule.gps_mock_tss_inst.llkid_key_data[63:0],
		    //
		    {2'b0,
		    cep_tb.fpga.topDesign.topMod.gpsmodule.gps_mock_tss_inst.sync_rst_in_dut,
		    cep_tb.fpga.topDesign.topMod.gpsmodule.gps_mock_tss_inst.startRound},
		    {2'b0,cep_tb.fpga.topDesign.topMod.gpsmodule.gps_mock_tss_inst.sv_num[5:0]},	 
		    //
		    cep_tb.fpga.topDesign.topMod.gpsmodule.gps_mock_tss_inst.aes_key[191:0],
		    {1'b0,cep_tb.fpga.topDesign.topMod.gpsmodule.gps_mock_tss_inst.pcode_speeds[30:0]},
		    cep_tb.fpga.topDesign.topMod.gpsmodule.gps_mock_tss_inst.pcode_initializers[47:0],
		    //
		    {3'b0,cep_tb.fpga.topDesign.topMod.gpsmodule.gps_mock_tss_inst.l_code_valid},	 
		    {3'b0,cep_tb.fpga.topDesign.topMod.gpsmodule.gps_mock_tss_inst.ca_code[12:0]},	 
		    cep_tb.fpga.topDesign.topMod.gpsmodule.gps_mock_tss_inst.l_code[127:0],
		    cep_tb.fpga.topDesign.topMod.gpsmodule.gps_mock_tss_inst.p_code[127:0]);
	    GPS_sampleNum++;
	    end	    
	 end // while (1)
      end
   endtask //
   
  
