//************************************************************************
// Copyright 2021 Massachusetts Institute of Technology
// SPDX short identifier: BSD-2-Clause
//
// File Name:      
// Program:        Common Evaluation Platform (CEP)
// Description:    
// Notes:          
//
//************************************************************************

//
//
//
`include "dpi_common.incl"

//
// DVT
// 
reg [255:0]    dvtFlags;
reg ipcDelay = 1;
initial begin
   dvtFlags = 0;
end

   //
task   WRITE_DVT_FLAG_TASK;
input [31:0] msb;
input [31:0] lsb;
input [31:0] value; 
integer s;
begin
`ifdef USE_DPI
  for (s=inBox.mPar[1];s<=inBox.mPar[0];s=s+1) begin 
    dvtFlags[s] = inBox.mPar[2] & 1'b1; 
    inBox.mPar[2] = inBox.mPar[2] >> 1; 
  end      
`else
   for (s =lsb;s<=msb;s=s+1) begin dvtFlags[s] = value[0]; value = value >> 1; end
`endif   
   //`logI("dvtFlags=%b",dvtFlags);
   @(posedge `SHIPC_CLK);   
end
endtask // WRITE_DVT_FLAG_TASK;
//
task   READ_DVT_FLAG_TASK;
input [31:0] msb;
input [31:0] lsb;
output [64:0] r_data;
integer m,l,s;
reg [63:0] tmp;

begin
   tmp = 0;
`ifdef USE_DPI
      m=inBox.mPar[0];
      l=inBox.mPar[1];
      for (int s=m;s>=l;s--) begin       
	 tmp = {tmp[62:0],dvtFlags[s]};
	 //$display("LOOP s=%d %x\n",s,tmp);      
      end
      inBox.mPar[0] = tmp;
      //$display("IN %d/%d %x\n",m,l,inBox.mPar[0]);

`else   
   for (s =msb;s>=lsb;s=s-1) begin
      tmp = {tmp[30:0],dvtFlags[s]};
   end
   r_data = tmp;
`endif   
   //`logI("dvtFlags=%b r_data=%x",dvtFlags,r_data);
   @(posedge `SHIPC_CLK);   
end
endtask // READ_DVT_FLAG_TASK;
   

//
// Loop to turn on the shIPC thread
//
reg __shIpc_EnableMode;
reg __shIpc_Active;
reg __shIpc_InProgress;
reg __shIpc_Time2Shutdown;
reg [3:0]  __mSlotId, __mCpuId;
reg __shIpc_cmdValid;
reg __shIpc_remoteReq;
reg [31:0] __shIpc_cmd;
reg [63:0] __shIpc_address;
reg [31:0] __shIpc_p0;
reg [31:0] __shIpc_p1;
reg [31:0] __shIpc_p2;
reg [31:0] __shIpc_p3;
reg [31:0] __shIpc_p4;
reg [31:0] __shIpc_p5;
reg [31:0] __shIpc_p6;
reg [31:0] __shIpc_p7;
//
//
//
reg [31:0] __shIpcStatus;
reg [31:0] __shIpcMailboxData;
initial begin
  __shIpcStatus = 0;	
  __shIpc_Active = 1;
  __shIpc_InProgress = 0;
  __shIpc_Time2Shutdown = 0;		
  __shIpc_EnableMode = 0;
  __shIpc_cmdValid = 0;
  __shIpc_remoteReq = 0;
  #1 __mSlotId = `SYSTEM_SLOT_ID;
  __mCpuId = `SYSTEM_CPU_ID;
end

// ===================================
// New DPI
// ===================================
`ifdef USE_DPI
always @(posedge __shIpc_EnableMode) begin
  @(posedge `SHIPC_CLK); // wait 1 clock
  `logI("=========== Entering shIpc_EnableMode Loop =================");	  
  while (__shIpc_EnableMode) begin
     // get the command
     get_v2c_mail(__mSlotId, __mCpuId,inBox);
     __shIpc_cmdValid       = inBox.mCmdValid;
     if (inBox.mActive == 0) 
       __shIpc_Active         = 0; // inBox.mActive;
     
     // thread done?
     if (__shIpc_InProgress && !__shIpc_Active) __shIpc_EnableMode = 0;
     if (inBox.mCmdValid) begin
        __shIpc_InProgress = 1;
	case (inBox.mCmd) // __shIpc_cmd)
	  `SHIPC_SHUTDOWN: __shIpc_Time2Shutdown = 1;
	  `SHIPC_WRITE_DVT_FLAG : begin
	     WRITE_DVT_FLAG_TASK(__shIpc_p0,__shIpc_p1,__shIpc_p2);
	  end
	  `SHIPC_READ_DVT_FLAG : begin
	     READ_DVT_FLAG_TASK(__shIpc_p0,__shIpc_p1,__shIpc_p0);
	  end
	  //
	  // WRITE32_64 to support backdoor
	  //
	  `SHIPC_WRITE32_64 : begin 
 `ifdef SHIPC_WRITE32_64_TASK
		`SHIPC_WRITE32_64_TASK;
  `undef SHIPC_WRITE32_64_TASK
 `else
		unsupportTask("SHIPC_WRITE32_64");
 `endif
	  end
	  //
	  // WRITE64_64 to support backdoor
	  //
	  `SHIPC_WRITE64_64 : begin 
 `ifdef SHIPC_WRITE64_64_TASK
		`SHIPC_WRITE64_64_TASK;
  `undef SHIPC_WRITE64_64_TASK
 `else
		unsupportTask("SHIPC_WRITE64_64");
 `endif
	  end
	  //
	  // READ32_64
	  //
	  `SHIPC_READ32_64 : begin 
 `ifdef SHIPC_READ32_64_TASK
	     `SHIPC_READ32_64_TASK;
  `undef SHIPC_READ32_64_TASK
 `else
	     unsupportTask("SHIPC_READ32_64");
 `endif
	  end
	  //
	  // READ64_64
	  //
	  `SHIPC_READ64_64 : begin 
 `ifdef SHIPC_READ64_64_TASK
	     `SHIPC_READ64_64_TASK;
  `undef SHIPC_READ64_64_TASK
 `else
	     unsupportTask("SHIPC_READ64_64");
 `endif
	  end
      	  `SHIPC_RUNCLK  : RUNCLK(__shIpc_p0);	
	  //
	  `SHIPC_READ_STATUS : __shIpc_p0 = __shIpcStatus;
      	  default        : $display("ERROR: %m __shIpc_cmd=%x NOT SUPPORTED!!!!\n",__shIpc_cmd);
	endcase
	// return data
	// complete the command
	// complete the command
	inBox.mCmdValid          = 0;	
	inBox.mRemoteReq         = 0;
	send_v2c_mail(__mSlotId, __mCpuId,inBox);
     end // if valid
     else if (ipcDelay) begin // to help spee dup backdoor loading
        @(posedge `SHIPC_CLK); // wait 1 clock
     end
  end // while
end // end posedge
   
// ===================================
// OLD PLI STUFFS!!!
// ===================================
`else
// Deprecated 11/19/19
`endif


task unsupportTask;
  input [1024:0] str;	
begin $display("ERROR: %m Command %s NOT SUPPORTED for this module!!!!\n",str); end
endtask

task RUNCLK;
input [31:0] clkCnt;
begin
`ifdef USE_DPI
  repeat(inBox.mPar[0]) @(posedge `SHIPC_CLK);
  inBox.mPar[0] = __simTime;
`else
  repeat(clkCnt) @(posedge `SHIPC_CLK);
  __shIpc_p0 = __simTime;
`endif  
end
endtask // RUNCLK
   
//
// Task to kill the sim job
//
`ifdef MODELSIM
import mti_fli::*;
`endif
always @(posedge __shIpc_Time2Shutdown) begin
   //  `DVT_PATH.done = 1;	
  `logI("Running for 1 more NS before terminate the simv process");
  `ifdef COVERAGE
    `logI("Dumping coverage data");
`ifdef MODELSIM
       mti_Command("dump_coverage");    
`endif
  `endif
  #10 $finish;
end

`ifdef MAIL_BOX_ON
//
// Mail box processing
//
reg hotSwapEnable;
reg hotSwapMode;
reg [15:0] hotSwapCard;
reg [31:0] time2HotSwap;
initial begin
 hotSwapEnable = 0;
 hotSwapMode   = 0;
 time2HotSwap  = 0;
end	
task processMail;
  input [31:0] mail;
  input [31:0] data;
  begin	
	// Processing the MailBox
	if (mail[15:0] == `MAILBOX_PULLCARD_CMD) begin
	   `logI("=========== Pulling Card in Slot %d out of system ============",mail[31:16]);
           hotSwapCard   = mail[31:16];
           time2HotSwap  = data;
	   hotSwapEnable = 1;
  	   hotSwapMode   = 0;
        end
	else if (mail[15:0] == `MAILBOX_INSERTCARD_CMD) begin
	   `logI("=========== Inserting Card in Slot %d back into the system ============",mail[31:16]);	
           hotSwapCard   = mail[31:16];
           time2HotSwap  = data;
	   hotSwapEnable = 1;
  	   hotSwapMode   = 1;
        end
	else begin
	   `logW("=========== Unregconized MailBox Command=%x ============",mail);	
        end
  end
endtask
   `endif //  `ifdef MAIL_BOX_ON
   
