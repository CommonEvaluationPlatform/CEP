//************************************************************************
// Copyright 2021 Massachusetts Institute of Technology
// SPDX short identifier: BSD-2-Clause
//
// File Name:      
// Program:        Common Evaluation Platform (CEP)
// Description:    
// Notes:          
//
//************************************************************************
//
// Capture rsa's IO cycle-by-cycle 
//
`ifndef MKSTR
`define MKSTR(x) `"x`"
`endif
//
reg CaptureRSA_vector=0;
`define RSA_DATA_WIDTH   (72+(12*4)+(2*8)+(32*3)+4+64+8+(4*32))
`define RSA_OUTPUT_WIDTH (3+1+64+(4*32))
int RSA_sampleNum = 0;
int RSA_fd;
//
always @(posedge srot_start_capture) begin
   $display("Enable cycle-by-cycle capturing of RSA stimulus");	    
   // wait until it gets out of reset
   if (cep_tb.fpga.topDesign.topMod.rsamodule.modexp_core_mock_tss_inst.rst)
     @(negedge cep_tb.fpga.topDesign.topMod.rsamodule.modexp_core_mock_tss_inst.rst);
   // next clock
   @(posedge cep_tb.fpga.topDesign.topMod.rsamodule.modexp_core_mock_tss_inst.clk);
   RSA_fd=$fopen("../../drivers/vectors/rsa_stimulus.txt","w");
   captureRSA_Stimulus();   
end	

always @(posedge c2c_capture_enable[`DVTF_RSA_CAPTURE_EN_BIT]) begin
   CaptureRSA_vector=1;
end
//
always @(negedge c2c_capture_enable[`DVTF_RSA_CAPTURE_EN_BIT]) begin
   if (CaptureRSA_vector) begin
      CaptureRSA_vector=0;
      repeat (2) @(posedge cep_tb.fpga.topDesign.topMod.rsamodule.modexp_core_mock_tss_inst.clk);
      $display("Stop Capturing RSA stimulus");
      $fwrite(RSA_fd,"};\n");
      $fwrite(RSA_fd,"`define RSA_SAMPLE_COUNT %d\n",RSA_sampleNum);      
      $fclose(RSA_fd);
      $system("gzip -f ../../drivers/vectors/rsa_stimulus.txt");
   end	    
end
//
//
// 
   task captureRSA_Stimulus;
      reg [`RSA_DATA_WIDTH-1:0] temp;
      begin
	 RSA_sampleNum = 0;
	 $display("Capturing stimulus");	 
	 $fwrite(RSA_fd,"//************************************************************************\n");
	 $fwrite(RSA_fd,"// Copyright 2021 Massachusetts Institute of Technology\n");
	 $fwrite(RSA_fd,"//\n");		
	 $fwrite(RSA_fd,"// File Name:      RSA_stimulus.txt\n");
	 $fwrite(RSA_fd,"// Program:        Common Evaluation Platform (CEP)\n");
	 $fwrite(RSA_fd,"// Description:    RSA Core unit testbench stimulus\n");
	 $fwrite(RSA_fd,"// Notes:\n");        
	 $fwrite(RSA_fd,"//\n");
	 $fwrite(RSA_fd,"//************************************************************************\n");
	 // these can be X so put them on top
	 $fwrite(RSA_fd,"// column#L1 : LLKI OUT  llkid_key_ready,llkid_key_complete,llkid_clear_key_ack\n");
	 $fwrite(RSA_fd,"// column#L2 : LLKI IN  llkid_key_valid, llkid_clear_key\n");
	 $fwrite(RSA_fd,"// column#L3 : LLKI IN  llkid_key_data\n");

	 $fwrite(RSA_fd,"// column#1  : IN  exponent_mem_api_cs\n");
	 $fwrite(RSA_fd,"// column#2  : IN  exponent_mem_api_rst\n");
	 $fwrite(RSA_fd,"// column#3  : IN  exponent_mem_api_wr\n");
	 $fwrite(RSA_fd,"// column#4  : IN  message_mem_api_cs\n");
	 $fwrite(RSA_fd,"// column#5  : IN  message_mem_api_rst\n");
	 $fwrite(RSA_fd,"// column#6  : IN  message_mem_api_wr\n");
	 $fwrite(RSA_fd,"// column#7  : IN  modulus_mem_api_cs\n");
	 $fwrite(RSA_fd,"// column#8  : IN  modulus_mem_api_rst\n");
	 $fwrite(RSA_fd,"// column#9  : IN  modulus_mem_api_wr\n");
	 $fwrite(RSA_fd,"// column#10 : IN  result_mem_api_cs\n");
	 $fwrite(RSA_fd,"// column#11 : IN  result_mem_api_rst\n");
	 $fwrite(RSA_fd,"// column#12 : IN  start\n");
	 $fwrite(RSA_fd,"// column#13 : IN  modulus_length[7:0]\n");	 
	 $fwrite(RSA_fd,"// column#14 : IN  exponent_length[12:0]\n");
	 $fwrite(RSA_fd,"// column#15 : IN  exponent_mem_api_write_data[31:0]\n");
	 $fwrite(RSA_fd,"// column#16 : IN  message_mem_api_write_data[31:0]\n");
	 $fwrite(RSA_fd,"// column#17 : IN  modulus_mem_api_write_data[31:0]\n");
	 $fwrite(RSA_fd,"// column#18 : OUT ready\n");	 	 
	 $fwrite(RSA_fd,"// column#19 : OUT cycles[63:0]\n");
	 $fwrite(RSA_fd,"// column#20 : OUT exponent_mem_api_read_data[31:0]\n");
	 $fwrite(RSA_fd,"// column#21 : OUT message_mem_api_read_data[31:0]\n");
	 $fwrite(RSA_fd,"// column#22 : OUT modulus_mem_api_read_data[31:0]\n");
	 $fwrite(RSA_fd,"// column#23 : OUT result_mem_api_read_data[31:0]\n");

	 //	 
	 $fwrite(RSA_fd,"`define RSA_DATA_WIDTH %s\n",`MKSTR(`RSA_DATA_WIDTH));
	 $fwrite(RSA_fd,"`define RSA_OUTPUT_WIDTH %s\n",`MKSTR(`RSA_OUTPUT_WIDTH));
	 $fwrite(RSA_fd,"reg [`RSA_DATA_WIDTH-1:0] RSA_buffer[] = {\n");
	 //
	 // wait until valid in to interleaver
	 while (srot_start_capture) begin
	    @(negedge cep_tb.fpga.topDesign.topMod.rsamodule.modexp_core_mock_tss_inst.modexp_core_inst.clk);
	    if (CaptureRSA_vector || !srot_stop_capture) begin
	    // MUST align to HEX number if _ is used!!!
	    if (RSA_sampleNum>0) begin
	       $fwrite(RSA_fd,"   ,");
            end else begin
	       $fwrite(RSA_fd,"    ");		 
            end
	    $fwrite(RSA_fd,"'h%x_%x_%x_%x_%x_%x_%x_%x_%x_%x_%x_%x_%x_%x_%x_%x_%x_%x_%x_%x_%x_%x_%x_%x_%x_%x\n",
	    	    {1'b0,cep_tb.fpga.topDesign.topMod.rsamodule.modexp_core_mock_tss_inst.llkid_key_ready,
		     cep_tb.fpga.topDesign.topMod.rsamodule.modexp_core_mock_tss_inst.llkid_key_complete,
		     cep_tb.fpga.topDesign.topMod.rsamodule.modexp_core_mock_tss_inst.llkid_clear_key_ack},
		    {2'b0, cep_tb.fpga.topDesign.topMod.rsamodule.modexp_core_mock_tss_inst.llkid_key_valid,
		     cep_tb.fpga.topDesign.topMod.rsamodule.modexp_core_mock_tss_inst.llkid_clear_key},
		    cep_tb.fpga.topDesign.topMod.rsamodule.modexp_core_mock_tss_inst.llkid_key_data[63:0],
		    //

		    {3'b0,cep_tb.fpga.topDesign.topMod.rsamodule.modexp_core_mock_tss_inst.modexp_core_inst.exponent_mem_api_cs},
		    {3'b0,cep_tb.fpga.topDesign.topMod.rsamodule.modexp_core_mock_tss_inst.modexp_core_inst.exponent_mem_api_rst},
		    {3'b0,cep_tb.fpga.topDesign.topMod.rsamodule.modexp_core_mock_tss_inst.modexp_core_inst.exponent_mem_api_wr},
		    {3'b0,cep_tb.fpga.topDesign.topMod.rsamodule.modexp_core_mock_tss_inst.modexp_core_inst.message_mem_api_cs},
		    {3'b0,cep_tb.fpga.topDesign.topMod.rsamodule.modexp_core_mock_tss_inst.modexp_core_inst.message_mem_api_rst},
		    {3'b0,cep_tb.fpga.topDesign.topMod.rsamodule.modexp_core_mock_tss_inst.modexp_core_inst.message_mem_api_wr},
		    {3'b0,cep_tb.fpga.topDesign.topMod.rsamodule.modexp_core_mock_tss_inst.modexp_core_inst.modulus_mem_api_cs},
		    {3'b0,cep_tb.fpga.topDesign.topMod.rsamodule.modexp_core_mock_tss_inst.modexp_core_inst.modulus_mem_api_rst},
		    {3'b0,cep_tb.fpga.topDesign.topMod.rsamodule.modexp_core_mock_tss_inst.modexp_core_inst.modulus_mem_api_wr},
		    {3'b0,cep_tb.fpga.topDesign.topMod.rsamodule.modexp_core_mock_tss_inst.modexp_core_inst.result_mem_api_cs},
		    {3'b0,cep_tb.fpga.topDesign.topMod.rsamodule.modexp_core_mock_tss_inst.modexp_core_inst.result_mem_api_rst},
		    {3'b0,cep_tb.fpga.topDesign.topMod.rsamodule.modexp_core_mock_tss_inst.modexp_core_inst.start},
		    cep_tb.fpga.topDesign.topMod.rsamodule.modexp_core_mock_tss_inst.modexp_core_inst.modulus_length[7:0],	 
		    {3'b0,cep_tb.fpga.topDesign.topMod.rsamodule.modexp_core_mock_tss_inst.modexp_core_inst.exponent_length[12:0]},
		    cep_tb.fpga.topDesign.topMod.rsamodule.modexp_core_mock_tss_inst.modexp_core_inst.exponent_mem_api_write_data[31:0],
		    cep_tb.fpga.topDesign.topMod.rsamodule.modexp_core_mock_tss_inst.modexp_core_inst.message_mem_api_write_data[31:0],
		    cep_tb.fpga.topDesign.topMod.rsamodule.modexp_core_mock_tss_inst.modexp_core_inst.modulus_mem_api_write_data[31:0],
		    {3'b0,cep_tb.fpga.topDesign.topMod.rsamodule.modexp_core_mock_tss_inst.modexp_core_inst.ready},	 	 
		    cep_tb.fpga.topDesign.topMod.rsamodule.modexp_core_mock_tss_inst.modexp_core_inst.cycles[63:0],
		    cep_tb.fpga.topDesign.topMod.rsamodule.modexp_core_mock_tss_inst.modexp_core_inst.exponent_mem_api_read_data[31:0],
		    cep_tb.fpga.topDesign.topMod.rsamodule.modexp_core_mock_tss_inst.modexp_core_inst.message_mem_api_read_data[31:0],
		    cep_tb.fpga.topDesign.topMod.rsamodule.modexp_core_mock_tss_inst.modexp_core_inst.modulus_mem_api_read_data[31:0],
		    cep_tb.fpga.topDesign.topMod.rsamodule.modexp_core_mock_tss_inst.modexp_core_inst.result_mem_api_read_data[31:0]
		    );

	    RSA_sampleNum++;
	    end
	 end // while (1)
      end
   endtask //
   
  
