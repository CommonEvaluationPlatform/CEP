//======================================================================
//
// {MODULE_NAME}.v
// -------------
// Verilog 2001 implementation of the SHA(AA) hash function.
// This is the internal core with wide interfaces.
//
//
// Author: Joachim Strombergson
// Copyright (c) 2013, Secworks Sweden AB
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or
// without modification, are permitted provided that the following
// conditions are met:
//
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in
//    the documentation and/or other materials provided with the
//    distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
// FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
// COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
// BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
// ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//======================================================================

// Modified by Matthew Hicks:
//   Convert to synchronous, positive level rese

// Modified by Brandon John:
//   Added arbitrary augmentation

module {MODULE_NAME}(
        input wire            clk,
        input wire            rst,

        input wire            init,
        input wire            next,

        input wire [BLOCKSIZE-1 : 0]  block,

        output wire           ready,
        output wire [DIGEST_SIZE-1 : 0] digest,
        output wire           digest_valid
    );


//----------------------------------------------------------------
// Internal constant and parameter definitions.
//----------------------------------------------------------------
parameter WORDSIZE = {WORDSIZE};
parameter BLOCKSIZE = WORDSIZE*16;
parameter ITERATIONS_LIM = {ITERATIONS}-1;
parameter LOG_ITERATIONS = {LOG_ITERATIONS};
parameter DIGEST_SIZE = WORDSIZE*8;

parameter SHAAA_H0_0 = {WORDSIZE}'h{H0[0]:X};
parameter SHAAA_H0_1 = {WORDSIZE}'h{H0[1]:X};
parameter SHAAA_H0_2 = {WORDSIZE}'h{H0[2]:X};
parameter SHAAA_H0_3 = {WORDSIZE}'h{H0[3]:X};
parameter SHAAA_H0_4 = {WORDSIZE}'h{H0[4]:X};
parameter SHAAA_H0_5 = {WORDSIZE}'h{H0[5]:X};
parameter SHAAA_H0_6 = {WORDSIZE}'h{H0[6]:X};
parameter SHAAA_H0_7 = {WORDSIZE}'h{H0[7]:X};


parameter CTRL_IDLE   = 0;
parameter CTRL_ROUNDS = 1;
parameter CTRL_DONE   = 2;


//----------------------------------------------------------------
// Registers including update variables and write enable.
//----------------------------------------------------------------
reg [WORDSIZE-1 : 0] a_reg;
reg [WORDSIZE-1 : 0] a_new;
reg [WORDSIZE-1 : 0] b_reg;
reg [WORDSIZE-1 : 0] b_new;
reg [WORDSIZE-1 : 0] c_reg;
reg [WORDSIZE-1 : 0] c_new;
reg [WORDSIZE-1 : 0] d_reg;
reg [WORDSIZE-1 : 0] d_new;
reg [WORDSIZE-1 : 0] e_reg;
reg [WORDSIZE-1 : 0] e_new;
reg [WORDSIZE-1 : 0] f_reg;
reg [WORDSIZE-1 : 0] f_new;
reg [WORDSIZE-1 : 0] g_reg;
reg [WORDSIZE-1 : 0] g_new;
reg [WORDSIZE-1 : 0] h_reg;
reg [WORDSIZE-1 : 0] h_new;
reg         a_h_we;

reg [WORDSIZE-1 : 0] H0_reg;
reg [WORDSIZE-1 : 0] H0_new;
reg [WORDSIZE-1 : 0] H1_reg;
reg [WORDSIZE-1 : 0] H1_new;
reg [WORDSIZE-1 : 0] H2_reg;
reg [WORDSIZE-1 : 0] H2_new;
reg [WORDSIZE-1 : 0] H3_reg;
reg [WORDSIZE-1 : 0] H3_new;
reg [WORDSIZE-1 : 0] H4_reg;
reg [WORDSIZE-1 : 0] H4_new;
reg [WORDSIZE-1 : 0] H5_reg;
reg [WORDSIZE-1 : 0] H5_new;
reg [WORDSIZE-1 : 0] H6_reg;
reg [WORDSIZE-1 : 0] H6_new;
reg [WORDSIZE-1 : 0] H7_reg;
reg [WORDSIZE-1 : 0] H7_new;
reg         H_we;

reg [LOG_ITERATIONS-1 : 0] t_ctr_reg;
reg [LOG_ITERATIONS-1 : 0] t_ctr_new;
reg                        t_ctr_we;
reg                        t_ctr_inc;
reg                        t_ctr_rst;

reg digest_valid_reg;
reg digest_valid_new;
reg digest_valid_we;

reg [1 : 0] shaaa_ctrl_reg;
reg [1 : 0] shaaa_ctrl_new;
reg         shaaa_ctrl_we;


//----------------------------------------------------------------
// Wires.
//----------------------------------------------------------------
reg digest_init;
reg digest_update;

reg state_init;
reg state_update;

reg first_block;

reg ready_flag;

reg [WORDSIZE-1 : 0]  t1;
reg [WORDSIZE-1 : 0]  t2;

wire [WORDSIZE-1 : 0] k_data;

reg                   w_init;
reg                   w_next;
wire [WORDSIZE-1 : 0] w_data;


//----------------------------------------------------------------
// Module instantiantions.
//----------------------------------------------------------------
{MODULE_NAME}_k_constants k_constants_inst(
                .addr(t_ctr_reg),
                .K(k_data)
            );


{MODULE_NAME}_w_mem w_mem_inst(
                .clk(clk),
                .rst(rst),

                .block(block),

                .init(w_init),
                .next(w_next),
                .w(w_data)
            );


//----------------------------------------------------------------
// Concurrent connectivity for ports etc.
//----------------------------------------------------------------
assign ready = ready_flag;

assign digest = {{H0_reg, H1_reg, H2_reg, H3_reg,
                 H4_reg, H5_reg, H6_reg, H7_reg}};

assign digest_valid = digest_valid_reg;


//----------------------------------------------------------------
// reg_update
// Update functionality for all registers in the core.
// All registers are positive edge triggered with synchronous
// reset. All registers have write enable.
//----------------------------------------------------------------
always @ (posedge clk)
    begin : reg_update
        if (rst)
            begin
                a_reg            <= {WORDSIZE}'b0;
                b_reg            <= {WORDSIZE}'b0;
                c_reg            <= {WORDSIZE}'b0;
                d_reg            <= {WORDSIZE}'b0;
                e_reg            <= {WORDSIZE}'b0;
                f_reg            <= {WORDSIZE}'b0;
                g_reg            <= {WORDSIZE}'b0;
                h_reg            <= {WORDSIZE}'b0;
                H0_reg           <= {WORDSIZE}'b0;
                H1_reg           <= {WORDSIZE}'b0;
                H2_reg           <= {WORDSIZE}'b0;
                H3_reg           <= {WORDSIZE}'b0;
                H4_reg           <= {WORDSIZE}'b0;
                H5_reg           <= {WORDSIZE}'b0;
                H6_reg           <= {WORDSIZE}'b0;
                H7_reg           <= {WORDSIZE}'b0;
                digest_valid_reg <= 0;
                t_ctr_reg        <= {LOG_ITERATIONS}'h0;
                shaaa_ctrl_reg  <= CTRL_IDLE;
            end
        else
            begin

                if (a_h_we)
                    begin
                        a_reg <= a_new;
                        b_reg <= b_new;
                        c_reg <= c_new;
                        d_reg <= d_new;
                        e_reg <= e_new;
                        f_reg <= f_new;
                        g_reg <= g_new;
                        h_reg <= h_new;
                    end

                if (H_we)
                    begin
                        H0_reg <= H0_new;
                        H1_reg <= H1_new;
                        H2_reg <= H2_new;
                        H3_reg <= H3_new;
                        H4_reg <= H4_new;
                        H5_reg <= H5_new;
                        H6_reg <= H6_new;
                        H7_reg <= H7_new;
                    end

                if (t_ctr_we)
                    t_ctr_reg <= t_ctr_new;

                if (digest_valid_we)
                    digest_valid_reg <= digest_valid_new;

                if (shaaa_ctrl_we)
                    shaaa_ctrl_reg <= shaaa_ctrl_new;
            end
    end // reg_update


//----------------------------------------------------------------
// digest_logic
//
// The logic needed to init as well as update the digest.
//----------------------------------------------------------------
always @*
    begin : digest_logic
        H0_new = {WORDSIZE}'b0;
        H1_new = {WORDSIZE}'b0;
        H2_new = {WORDSIZE}'b0;
        H3_new = {WORDSIZE}'b0;
        H4_new = {WORDSIZE}'b0;
        H5_new = {WORDSIZE}'b0;
        H6_new = {WORDSIZE}'b0;
        H7_new = {WORDSIZE}'b0;
        H_we = 0;

        if (digest_init)
            begin
                H_we = 1;
                H0_new = SHAAA_H0_0;
                H1_new = SHAAA_H0_1;
                H2_new = SHAAA_H0_2;
                H3_new = SHAAA_H0_3;
                H4_new = SHAAA_H0_4;
                H5_new = SHAAA_H0_5;
                H6_new = SHAAA_H0_6;
                H7_new = SHAAA_H0_7;
            end

        if (digest_update)
            begin
                H0_new = H0_reg + a_reg;
                H1_new = H1_reg + b_reg;
                H2_new = H2_reg + c_reg;
                H3_new = H3_reg + d_reg;
                H4_new = H4_reg + e_reg;
                H5_new = H5_reg + f_reg;
                H6_new = H6_reg + g_reg;
                H7_new = H7_reg + h_reg;
                H_we = 1;
            end
    end // digest_logic


//----------------------------------------------------------------
// t1_logic
//
// The logic for the T1 function.
//----------------------------------------------------------------
always @*
    begin : t1_logic
        reg [WORDSIZE-1 : 0] sum1;
        reg [WORDSIZE-1 : 0] ch;

        sum1 =  {{e_reg[{SIGMA_CAP_1[0]}-1 : 0],  e_reg[WORDSIZE-1 : {SIGMA_CAP_1[0]}] }} ^
                {{e_reg[{SIGMA_CAP_1[1]}-1 : 0],  e_reg[WORDSIZE-1 : {SIGMA_CAP_1[1]}] }} ^
                {{e_reg[{SIGMA_CAP_1[2]}-1 : 0],  e_reg[WORDSIZE-1 : {SIGMA_CAP_1[2]}] }};

        ch = (e_reg & f_reg) ^ ((~e_reg) & g_reg);

        t1 = h_reg + sum1 + ch + w_data + k_data;
    end // t1_logic


//----------------------------------------------------------------
// t2_logic
//
// The logic for the T2 function
//----------------------------------------------------------------
always @*
    begin : t2_logic
        reg [WORDSIZE-1 : 0] sum0;
        reg [WORDSIZE-1 : 0] maj;

        sum0 =  {{a_reg[{SIGMA_CAP_0[0]}-1 : 0],  a_reg[WORDSIZE-1 : {SIGMA_CAP_0[0]}] }} ^
                {{a_reg[{SIGMA_CAP_0[1]}-1 : 0],  a_reg[WORDSIZE-1 : {SIGMA_CAP_0[1]}] }} ^
                {{a_reg[{SIGMA_CAP_0[2]}-1 : 0],  a_reg[WORDSIZE-1 : {SIGMA_CAP_0[2]}] }};

        maj = (a_reg & b_reg) ^ (a_reg & c_reg) ^ (b_reg & c_reg);

        t2 = sum0 + maj;
    end // t2_logic


//----------------------------------------------------------------
// state_logic
//
// The logic needed to init as well as update the state during
// round processing.
//----------------------------------------------------------------
always @*
    begin : state_logic
        a_new  = {WORDSIZE}'b0;
        b_new  = {WORDSIZE}'b0;
        c_new  = {WORDSIZE}'b0;
        d_new  = {WORDSIZE}'b0;
        e_new  = {WORDSIZE}'b0;
        f_new  = {WORDSIZE}'b0;
        g_new  = {WORDSIZE}'b0;
        h_new  = {WORDSIZE}'b0;
        a_h_we = 0;

        if (state_init)
            begin
                a_h_we = 1;
                if (first_block)
                    begin
                        a_new  = SHAAA_H0_0;
                        b_new  = SHAAA_H0_1;
                        c_new  = SHAAA_H0_2;
                        d_new  = SHAAA_H0_3;
                        e_new  = SHAAA_H0_4;
                        f_new  = SHAAA_H0_5;
                        g_new  = SHAAA_H0_6;
                        h_new  = SHAAA_H0_7;
                    end
                else
                    begin
                        a_new  = H0_reg;
                        b_new  = H1_reg;
                        c_new  = H2_reg;
                        d_new  = H3_reg;
                        e_new  = H4_reg;
                        f_new  = H5_reg;
                        g_new  = H6_reg;
                        h_new  = H7_reg;
                    end
            end

        if (state_update)
            begin
                a_new  = t1 + t2;
                b_new  = a_reg;
                c_new  = b_reg;
                d_new  = c_reg;
                e_new  = d_reg + t1;
                f_new  = e_reg;
                g_new  = f_reg;
                h_new  = g_reg;
                a_h_we = 1;
            end
    end // state_logic


//----------------------------------------------------------------
// t_ctr
//
// Update logic for the round counter, a monotonically
// increasing counter with reset.
//----------------------------------------------------------------
always @*
    begin : t_ctr
        t_ctr_new = 0;
        t_ctr_we  = 0;

        if (t_ctr_rst)
            begin
                t_ctr_new = 0;
                t_ctr_we  = 1;
            end

        if (t_ctr_inc)
            begin
                t_ctr_new = t_ctr_reg + 1'b1;
                t_ctr_we  = 1;
            end
    end // t_ctr


//----------------------------------------------------------------
// shaaa_ctrl_fsm
//
// Logic for the state machine controlling the core behaviour.
//----------------------------------------------------------------
always @*
    begin : shaaa_ctrl_fsm
        digest_init      = 0;
        digest_update    = 0;

        state_init       = 0;
        state_update     = 0;

        first_block      = 0;
        ready_flag       = 0;

        w_init           = 0;
        w_next           = 0;

        t_ctr_inc        = 0;
        t_ctr_rst        = 0;

        digest_valid_new = 0;
        digest_valid_we  = 0;

        shaaa_ctrl_new  = CTRL_IDLE;
        shaaa_ctrl_we   = 0;


        case (shaaa_ctrl_reg)
            CTRL_IDLE:
                begin
                    ready_flag = 1;

                    if (init)
                        begin
                            digest_init      = 1;
                            w_init           = 1;
                            state_init       = 1;
                            first_block      = 1;
                            t_ctr_rst        = 1;
                            digest_valid_new = 0;
                            digest_valid_we  = 1;
                            shaaa_ctrl_new  = CTRL_ROUNDS;
                            shaaa_ctrl_we   = 1;
                        end

                    if (next)
                        begin
                            t_ctr_rst        = 1;
                            w_init           = 1;
                            state_init       = 1;
                            digest_valid_new = 0;
                            digest_valid_we  = 1;
                            shaaa_ctrl_new  = CTRL_ROUNDS;
                            shaaa_ctrl_we   = 1;
                        end
                end


            CTRL_ROUNDS:
                begin
                    w_next       = 1;
                    state_update = 1;
                    t_ctr_inc    = 1;

                    if (t_ctr_reg == ITERATIONS_LIM)
                        begin
                            shaaa_ctrl_new = CTRL_DONE;
                            shaaa_ctrl_we  = 1;
                        end
                end


            CTRL_DONE:
                begin
                    digest_update    = 1;
                    digest_valid_new = 1;
                    digest_valid_we  = 1;

                    shaaa_ctrl_new  = CTRL_IDLE;
                    shaaa_ctrl_we   = 1;
                end
        endcase // case (shaaa_ctrl_reg)
    end // shaaa_ctrl_fsm

endmodule // shaaa_core

          //======================================================================
          // EOF shaaa_core.v
          //======================================================================
